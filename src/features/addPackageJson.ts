import path from 'path';
import execa from 'execa';

export default async function (options: ChoreOptions) {
  const { projectDir } = options;
  const appName = path.basename(projectDir);
  const gitInfo = await getGitInfo();
  if (!gitInfo.url) {
    gitInfo.url = 'https://github.com/iwfan/chore-cli';
  }

  const pkgJson = {
    name: appName,
    version: '0.1.0',
    description: `${appName} is generated by chore-cli.`,
    main: 'dist/index.js',
    module: `dist/${appName}.esm.js`,
    typings: 'dist/index.d.ts',
    scripts: {
      'test': 'echo "Error: no test specified" && exit 1'
    },
    repository: {
      'type': 'git',
      'url': `git+${gitInfo.url}.git`
    },
    keywords: [
      'chore',
      'chore-cli'
    ],
    author: {
      'name': gitInfo.user,
      'email': gitInfo.email
    },
    license: 'MIT',
    bugs: {
      'url': `${gitInfo.url}/issues`
    },
    homepage: `${gitInfo.url}#readme`,
    files: [
      'dist'
    ],
  };

  Object.assign<FileContent, FileContent>(options.files, {
    'package.json': JSON.stringify(pkgJson, null, 2)
  });
}


async function getGitInfo() {
  const gitInfo = {
    url: '',
    user: '',
    email: ''
  };

  const infoMap: any = {
    'user': 'user.name',
    'email': 'user.email',
    'url': 'remote.origin.url',
  };

  try {
    for (let infoMapKey in infoMap) {
      if (Object.hasOwnProperty.call(infoMap, infoMapKey)) {
        const property = infoMap[infoMapKey];
        const { stdout: user } = await execa('git', ['config', '--get', property]);
        (gitInfo as any)[infoMapKey] = user;
      }
    }
  } catch (e) {

  }

  if (gitInfo.url) {
    gitInfo.url = transformGitUrlToHttpsUrl(gitInfo.url) || '';
  }

  return gitInfo;
}


function transformGitUrlToHttpsUrl(url: string): string | void {
  const substr = url.substring(url.lastIndexOf(':') + 1, url.lastIndexOf('.'));
  const [userName, repoName] = substr.split('/');
  if (userName && repoName) {
    return `https://github.com/${userName}/${repoName}`;
  }
}
